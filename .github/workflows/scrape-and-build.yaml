name: "Scrape and Build"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  scrape:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.scrapejob.outputs.result }}
    
    defaults:
      run:
        shell: bash

    steps:
      
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - run: npm ci
        working-directory: scripts
      
      - id: scrapejob
        run: npm run scrape
        working-directory: scripts
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build:
    needs: scrape
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # job: ${{ fromJSON(needs.scrape.outputs.result) }}
        job: ["{\"source\":{\"owner\":\"prometheus\",\"repository\":\"prometheus\",\"tag\":\"v2.42.0\"},\"image\":{\"repository\":\"promtool\",\"tag\":\"v2.42.0\"}}"]
    
    permissions:
      contents: write
      issues: write

    env:
      SOURCE_OWNER: ${{ fromJSON(matrix.job).source.owner }}
      SOURCE_REPOSITORY: ${{ fromJSON(matrix.job).source.repository }}
      SOURCE_TAG: ${{ fromJSON(matrix.job).source.tag }}
      IMAGE_REPOSITORY: ${{ fromJSON(matrix.job).image.repository }}
      IMAGE_TAG: ${{ fromJSON(matrix.job).image.tag }}

    defaults:
      run:
        shell: bash

    steps:
      
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.SOURCE_OWNER }}/${{ env.SOURCE_REPOSITORY }}
          ref: ${{ env.SOURCE_TAG }}
          path: ${{ env.SOURCE_REPOSITORY }}
      
      - uses: actions/checkout@v3
        with:
          path: stocker
      
      # - name: Build and export to Docker daemon
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ${{ env.SOURCE_REPOSITORY }}
      #     file: stocker/repositories/${{ env.IMAGE_REPOSITORY }}/Dockerfile
      #     load: true
      #     tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     build-args: |
      #       SOURCE_OWNER=${{ env.SOURCE_OWNER }}
      #       SOURCE_REPOSITORY=${{ env.SOURCE_REPOSITORY }}
      #       SOURCE_TAG=${{ env.SOURCE_TAG }}
      #       IMAGE_REPOSITORY=${{ env.IMAGE_REPOSITORY }}
      #       IMAGE_TAG=${{ env.IMAGE_TAG }}
      
      - name: Build image
        run: |
          exec 2> >(tee -a /tmp/error.log >&2) > >(tee -a /tmp/out.log)
          docker build \
            --file stocker/repositories/${{ env.IMAGE_REPOSITORY }}/Dockerfile \
            --tag ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            --build-arg SOURCE_OWNER=${{ env.SOURCE_OWNER }} \
            --build-arg SOURCE_REPOSITORY=${{ env.SOURCE_REPOSITORY }} \
            --build-arg SOURCE_TAG=${{ env.SOURCE_TAG }} \
            --build-arg IMAGE_REPOSITORY=${{ env.IMAGE_REPOSITORY }} \
            --build-arg IMAGE_TAG=${{ env.IMAGE_TAG }} \
            ${{ env.SOURCE_REPOSITORY }}

      - name: Test image
        env:
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
        working-directory: stocker/repositories/${{ env.IMAGE_REPOSITORY }}
        run: |
          exec 2> >(tee -a /tmp/error.log >&2) > >(tee -a /tmp/out.log)
          ./test.bash

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - run: npm ci
        working-directory: stocker/scripts
      
      - run: npm run createDockerhubRepository
        working-directory: stocker/scripts
        env:
          INPUT_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          INPUT_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          INPUT_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
      
      - run: npm run updateDockerhubRepository
        working-directory: stocker/scripts
        env:
          INPUT_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          INPUT_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          INPUT_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
          INPUT_FULL_DESCRIPTION_PATH: ${{ env.SOURCE_REPOSITORY }}/README.md

      - uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        run: |
          exec 2> >(tee -a /tmp/error.log >&2) > >(tee -a /tmp/out.log)
          docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # - name: Push image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ${{ env.SOURCE_REPOSITORY }}
      #     file: stocker/repositories/${{ env.IMAGE_REPOSITORY }}/Dockerfile
      #     push: true
      #     tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     build-args: |
      #       SOURCE_OWNER=${{ env.SOURCE_OWNER }}
      #       SOURCE_REPOSITORY=${{ env.SOURCE_REPOSITORY }}
      #       SOURCE_TAG=${{ env.SOURCE_TAG }}
      #       IMAGE_REPOSITORY=${{ env.IMAGE_REPOSITORY }}
      #       IMAGE_TAG=${{ env.IMAGE_TAG }}

      - name: Create success history file
        if: ${{ success() }}
        working-directory: stocker
        run: |
          mkdir -p .history/${{ env.IMAGE_REPOSITORY }}
          cat <<- EOF > .history/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_TAG }}
            Successfully built and pushed stocker/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
          EOF
        
      - name: Create failure history file
        if: ${{ failure() }}
        working-directory: stocker
        run: |
          mkdir -p .history/${{ env.IMAGE_REPOSITORY }}
          cat <<- EOF > .history/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_TAG }}
            Failed to build stocker/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}

          EOF

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ success() || failure() }}
        with:
          commit_message: "Complete build stocker/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          commit_options: "--no-signoff"
          file_pattern: .history/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_TAG }}
          repository: stocker

      - name: View failed job log
        id: failure
        run: |
          set -Eeuo pipefail
          echo "log=$(cat /tmp/error.log)" >> $GITHUB_OUTPUT
        if: ${{ failure() }}
        working-directory: stocker
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Save failed job log to history file
        run: echo ${{ steps.failure.outputs.log }} >> .history/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_TAG }}
        if: ${{ failure() }}\
        working-directory: stocker

      - name: Create issue
        if: ${{ failure() }}
        uses: actions-ecosystem/action-create-issue@v1
        with:
          title: "Failed to build stocker/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          body: |
            The build of stocker/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }} failed.
            
            ```
            ${{ steps.failure.outputs.log }}
            ```
          labels: "bug"
          github_token: ${{ github.token }}

      - uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}
        timeout-minutes: 10
